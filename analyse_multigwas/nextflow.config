
swarmPort = '2376'
queue = 'batch'

manifest {
    description = 'Extract information of various files'
    mainScript = 'main.nf'
}


aws {
    accessKey =''
    secretKey =''
    region    ='eu-west-1'
}

cloud {
    imageId = "ami-710b9108"      // specify your AMI id here
    instanceType = "m4.xlarge"
    subnetId = "null"
    sharedStorageId   = "null"
    sharedStorageMount = "/mnt/shared"
    bootStorageSize = "20GB"     // Size of disk for images spawned
    //   instanceStorageMount = ""   // Set a common mount point for images
    //   instanceStorageDevice = ""  // Set a common block device for images
    autoscale {
        enabled = true
        maxInstances = 1
        terminateWhenIdle = true
    }

}


params {

    // Directories
    work_dir                = "/$PWD"
    scripts                 = "${params.work_dir}/scripts"

    output_dir              = "${params.work_dir}/output"
    output                  = "out"
    max_forks            = 195     
    // Data
    strandreport         =""
    manifest             =  ""
    idpat                =  0  // or "(\\w+)-DNA_(\\w+)_.*" or ".*_(.*)"


    // Needed for topbottom.nf -- uncomment and put in details
    // reference        = ""
    // output_align     = ""
    // samplesheet      = ""
    // chipdescription  = ""  

    accessKey            = ""
    secretKey            = ""
    region               = "eu-west-1"
    AMI                  = "ami-710b9108"
    instanceType         = "m4.xlarge"
    bootStorageSize      = "20GB"
    maxInstances         = "1"
    big_time             = '100h'
    sharedStorageMount   = "/mnt/shared"


}
profiles {

    // For execution on a local machine, no containerization. -- Default
    standard {
        process.executor = 'local'
    }
    slurm {
    process.executor = 'slurm'
    process.queue = queue
    }


    // For execution on a PBS scheduler, no containerization.
    pbs {
        process.executor = 'pbs'
        process.queue = queue
    }

    // For execution on a PBS scheduler with containerization.
    pbsDocker {

        process.executor = 'pbs'
	container = py3Image
        process.executor = 'local'
        process.$produceReports.container  =latexImage
        process.$computeTest.container     = "$gemmaImage"

        docker.remove      = true
        docker.runOptions  = '--rm'
        docker.registry    = 'quay.io'
        docker.enabled     = true
        docker.temp        = 'auto'
        docker.fixOwnership= true
    }

    // Execute pipeline with Docker locally
    docker {
        process.executor = 'local'
	process.container = py3Image
        process.$produceReports.container  =latexImage
        process.$computeTest.container     = "$gemmaImage"
        process.$doReport.container  =latexImage

        docker.remove      = true
        docker.runOptions  = '--rm'
              docker.registry    = 'quay.io'
        docker.enabled     = true
        docker.temp        = 'auto'
        docker.fixOwnership= true
        docker.process.executor = 'local'
    }

    dockerpbs {
        process.executor = 'pbs'
	process.container = py3Image
        process.$produceReports.container  ="$latexImage"
        process.$computeTest.container     = "$gemmaImage"

        docker.remove      = true
        docker.runOptions  = '--rm'
              docker.registry    = 'quay.io'
        docker.enabled     = true
        docker.temp        = 'auto'
        docker.fixOwnership= true
        docker.process.executor = 'local'
        docker.fixOwnership = true
    }


    // Execute pipeline with Docker Swarm setup
    dockerSwarm {

	process.container = py3Image
        process.$produceReports.container  ="$latexImage"
        process.$computeTest.container     = "$gemmaImage"


        docker.remove      = true
        docker.runOptions  = '--rm'
        docker.registry    = 'quay.io'
        docker.enabled     = true
        docker.temp        = 'auto'
        docker.fixOwnership= true
        docker.process.executor = 'local'
        docker.engineOptions = "-H :$swarmPort"
    }


    singularity {

        sg_py3Image = "/home/scott/py3plink.img"
        sg_latexImage = "/home/scott/h3agwas-texlive.img"


        enabled = true
        process.executor = 'pbs'
        process.queue = queue
        container = sg_py3Image
        process.$produceReports.container  = sg_latexImage

     }

}


timeline { 
    enabled=true
    file = "nextflow_reports/timeline.html"
}

report {
    enabled = true
    file = "nextflow_reports/report.html"
}
